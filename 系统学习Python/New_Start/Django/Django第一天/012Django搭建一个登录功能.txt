
1.创建项目

2.在项目中创建应用

3.配置项目和应用
    3.1 配置项目setting 文件
        3.1.1 把应用配置到: INSTALLED_APPS
               INSTALLED_APPS = [
                    'django.contrib.admin',
                    'django.contrib.auth',
                    'django.contrib.contenttypes',
                    'django.contrib.sessions',
                    'django.contrib.messages',
                    'django.contrib.staticfiles',
                    'loginfunction'
                ]
        3.1.2 配置数据库为本地mysql 数据库
                DATABASES = {
                        'default': {
                            'ENGINE': 'django.db.backends.mysql',
                            'NAME': 'users',  # 使用数据库的名字，数据库必须手动创建
                            'USER': 'root',  # 链接mysql 的用户名
                            'PASSWORD': '123456',  # 链接mysql 密码
                            'HOST': 'localhost',  # 指定mysql数据的所在的IP地址
                            'PORT': 3306,  # 链接mysql数据库的端口
                        }
                    }
        3.1.3 创建模板文件 templates/loginfunction 并配置:TEMPLATES
                'DIRS': [os.path.join(BASE_DIR, 'templates')],

        3.1.4 在项目中创建静态资源包目录 static/js static/css 等,在setting.py 文件中最后添加:
              STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')];

        3.1.5 修改 MIDDLEWARE 配置 注释掉:
               # 'django.middleware.csrf.CsrfViewMiddleware', # 这个是为了结局ajax请求出错

        3.1.6 修改 ALLOWED_HOSTS 配置:
               ALLOWED_HOSTS = ['*']




4.服务器项目中使用技术:
  4.1 项目中需要导入 JsonResponse 用于json 数据返回
        from django.http import HttpResponse,JsonResponse
  4.2 项目中获取ajax 前端请求的参数数据:
        4.2.1.获取请求的参数据
        username = request.POST.get('username');
        password = request.POST.get('password');

        4.2.2.查询数据库数据的时候,尽量用filter 来查询数据
            (get 方式查询数据 如果没有数据会返回异常,)

        4.2.3 返回json 数据用 JsonResponse
            JsonResponse({'res':1});



5.前端html 使用了技术
  5.1 前端访问url 路径使用 location.href 定位到某一个url
      location.href = '/index';

  5.2 使用到了 JQuery 中的 ajax 请求:
        $.ajax({
                    'url':'/ajax_login',
                    'dataType':'json',
                    'type':'post',
                    'async':false, //这个是设置同步ajax 请求
                    'data':{'username':username,'password':password},
                    'success':function (data) {
                        console.log(data)
                        if (data.res == 1){
                            location.href = '/index';
                        } else if (data.res == 2){
                            alert('用户名不存在');
                        } else {
                            $('#passwork_error').show();
                        }
                    },
                    'fail':function (error) {
                        console.log(error)
                    }
                });

   5.3 ajax 的作用是是什么:
        在不重新加载页面的前提下 ,给页面做局部刷新

   5.4 前端尽量少用表单提交 表单提交问题太多了,处理起来比较麻烦
