1.获取浏览器ip地址,也就是联网的ip
  def get_computer_ip(request):
    """获取电脑的ip"""
    user_ip = request.META['REMOTE_ADDR'];

    return HttpResponse(user_ip);

2.拒绝某一个ip 访问 (因为访问太频繁了)
  def refuse_ip(request):
    """拒绝某一个ip的访问"""
    # 这个是要拒绝的ip地址list
    REFUSE_IPS = ['192.168.1.23'];

    # 获取访问的ip
    user_ip = request.META["REMOTE_ADDR"];

    if user_ip in REFUSE_IPS:
        return HttpResponse("你的ip被我们禁止了");

    return HttpResponse("正常访问");

3.定义一个访问太频繁的装饰器
   def block_ip(view_func):
        def wrapper(request,*args,**kwargs):
            # 获取访问的ip
            user_ip = request.META["REMOTE_ADDR"];
            REFUSE_IPS = ['192.168.1.23'];
            if user_ip in REFUSE_IPS:
                return HttpResponse("你的ip被我们禁止了");
            else:
                return view_func(request,*args,**kwargs);

        return wrapper;


4.中间件使用:
  作用:中间件函数是Django框架给我们预留的函数接口,可以让我们干预请求和应答的过程
  中间件:init call 方法必须要有,否者报错
  方法调用顺序: init > process_view > 视图函数 > call (其中init 方法只是在服务器刚启动的时候调用一次)
  学习官网:https://docs.djangoproject.com/zh-hans/3.0/topics/http/middleware/#init-get-response
  1.在应用中创建一个中间件的python 文件 middleware.py (文件名可以自己定义,一般我们这样写)
  2.编写middleware.py
     第一步.创建一个Test1Middleware 的类
           class Test1Middleware:
                """测试中间件函数的调用顺序"""

                def __init__(self, get_response):
                    """服务器重启之后,接受到的第一个请求,会调用这个init方法"""
                    self.get_response = get_response
                    funcName = sys._getframe().f_code.co_name  # 获取调用函数名
                    lineNumber = sys._getframe().f_back.f_lineno  # 获取行号
                    print(lineNumber,funcName)

                def __call__(self, request):
                    # Code to be executed for each request before
                    # the view (and later middleware) are called.

                    response = self.get_response(request)

                    # Code to be executed for each request/response after
                    # the view is called.
                    funcName = sys._getframe().f_code.co_name  # 获取调用函数名
                    lineNumber = sys._getframe().f_back.f_lineno  # 获取行号
                    print(lineNumber, funcName)

                    return response


                def process_view(self,request, view_func, view_args, view_kwargs):
                    """process_view() 只在 Django 调用视图前被调用"""

                    funcName = sys._getframe().f_code.co_name  # 获取调用函数名
                    lineNumber = sys._getframe().f_back.f_lineno  # 获取行号
                    print(lineNumber, funcName)

                def process_exception(self, request, exception):
                    """视图异常的时候会被调用"""
                    funcName = sys._getframe().f_code.co_name  # 获取调用函数名
                    lineNumber = sys._getframe().f_back.f_lineno  # 获取行号
                    print(lineNumber, funcName)

                    return HttpResponse('server bad');

                def process_template_response(self, request, response):
                    """这个是视图函数调用完之后在调用"""
                    funcName = sys._getframe().f_code.co_name  # 获取调用函数名
                    lineNumber = sys._getframe().f_back.f_lineno  # 获取行号
                    print(lineNumber, funcName)
                    return response;
     第二步:注册中间类:
           在项目的setting.py 文件中注册Test1Middleware
           MIDDLEWARE 中添加:
           'loginfunction.middleware.Test1Middleware',


